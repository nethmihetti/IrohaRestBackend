version: 2
jobs:
  build_and_test:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6.1

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/IrohaRestBackend

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            python manage.py test

      - store_artifacts:
          path: test-reports
          destination: test-reports


  deploy_to_dev:
    docker:
      - image: google/cloud-sdk
    environment:
      - PROJECT_NAME: "InsuranceAggregatorBackEnd"
      - GOOGLE_PROJECT_ID: "insuranceaggregatorbackend"
      - GOOGLE_COMPUTE_ZONE: "us-central1-b"
      - GOOGLE_CLUSTER_NAME: "aggregator-backend-nonprod"
    steps:
      - checkout
      - run:
          name: Setup Google Cloud SDK
          command: |
            apt-get install -qq -y gettext
            echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            gcloud --quiet container clusters get-credentials ${GOOGLE_CLUSTER_NAME}
      - setup_remote_docker
      - run:
          name: Docker build and push
          command: |
            echo $DATASOURCE_URL
            gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://eu.gcr.io
            docker build \
              --no-cache -f infrastructure/Dockerfile \
              --build-arg COMMIT_REF=${CIRCLE_SHA1} \
              -t ${GOOGLE_PROJECT_ID} .
            docker tag ${GOOGLE_PROJECT_ID} eu.gcr.io/${GOOGLE_PROJECT_ID}/backendrepo:${CIRCLE_SHA1}
            docker push eu.gcr.io/${GOOGLE_PROJECT_ID}/backendrepo:${CIRCLE_SHA1}
      - run:
          name: Deploy to Kubernetes
          command: |
            envsubst < infrastructure/k8s_dev.yml > ${HOME}/patched_k8s_dev.yml
            kubectl apply -f ${HOME}/patched_k8s_dev.yml
            kubectl rollout status deployment/${GOOGLE_PROJECT_ID}

  deploy_to_stag:
    docker:
      - image: google/cloud-sdk
    environment:
      - PROJECT_NAME: "InsuranceAggregatorBackEnd"
      - GOOGLE_PROJECT_ID: "insuranceaggregatorbackend"
      - GOOGLE_COMPUTE_ZONE: "us-central1-b"
      - GOOGLE_CLUSTER_NAME: "aggregator-backend-nonprod"
    steps:
      - checkout
      - run:
          name: Setup Google Cloud SDK
          command: |
            apt-get install -qq -y gettext
            echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            gcloud --quiet container clusters get-credentials ${GOOGLE_CLUSTER_NAME}
      - setup_remote_docker
      - run:
          name: Docker build and push
          command: |
            echo $DATASOURCE_URL
            gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://eu.gcr.io
            docker build \
              --no-cache -f infrastructure/Dockerfile \
              --build-arg COMMIT_REF=${CIRCLE_SHA1} \
              -t ${GOOGLE_PROJECT_ID} .
            docker tag ${GOOGLE_PROJECT_ID} eu.gcr.io/${GOOGLE_PROJECT_ID}/backendrepo:${CIRCLE_SHA1}
            docker push eu.gcr.io/${GOOGLE_PROJECT_ID}/backendrepo:${CIRCLE_SHA1}
      - run:
          name: Deploy to Kubernetes
          command: |
            envsubst < infrastructure/k8s_stag.yml > ${HOME}/patched_k8s_stag.yml
            kubectl apply -f ${HOME}/patched_k8s_stag.yml
            kubectl rollout status deployment/${GOOGLE_PROJECT_ID}

workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build_and_test
      - deploy_to_dev:
          requires:
            - build_and_test
          filters:
            branches:
              only:
              - develop
              - master
      - deploy_to_stag:
          requires:
            - build_and_test
          filters:
            branches:
              only:
                - staging
                - master

